
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ResumeDownload` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ResumeDownload
 * 
 */
export type ResumeDownloadModel = runtime.Types.Result.DefaultSelection<Prisma.$ResumeDownloadPayload>

export type AggregateResumeDownload = {
  _count: ResumeDownloadCountAggregateOutputType | null
  _avg: ResumeDownloadAvgAggregateOutputType | null
  _sum: ResumeDownloadSumAggregateOutputType | null
  _min: ResumeDownloadMinAggregateOutputType | null
  _max: ResumeDownloadMaxAggregateOutputType | null
}

export type ResumeDownloadAvgAggregateOutputType = {
  id: number | null
  count: number | null
}

export type ResumeDownloadSumAggregateOutputType = {
  id: number | null
  count: number | null
}

export type ResumeDownloadMinAggregateOutputType = {
  id: number | null
  count: number | null
  createdAt: Date | null
}

export type ResumeDownloadMaxAggregateOutputType = {
  id: number | null
  count: number | null
  createdAt: Date | null
}

export type ResumeDownloadCountAggregateOutputType = {
  id: number
  count: number
  createdAt: number
  _all: number
}


export type ResumeDownloadAvgAggregateInputType = {
  id?: true
  count?: true
}

export type ResumeDownloadSumAggregateInputType = {
  id?: true
  count?: true
}

export type ResumeDownloadMinAggregateInputType = {
  id?: true
  count?: true
  createdAt?: true
}

export type ResumeDownloadMaxAggregateInputType = {
  id?: true
  count?: true
  createdAt?: true
}

export type ResumeDownloadCountAggregateInputType = {
  id?: true
  count?: true
  createdAt?: true
  _all?: true
}

export type ResumeDownloadAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ResumeDownload to aggregate.
   */
  where?: Prisma.ResumeDownloadWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ResumeDownloads to fetch.
   */
  orderBy?: Prisma.ResumeDownloadOrderByWithRelationInput | Prisma.ResumeDownloadOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ResumeDownloadWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ResumeDownloads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ResumeDownloads.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ResumeDownloads
  **/
  _count?: true | ResumeDownloadCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ResumeDownloadAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ResumeDownloadSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ResumeDownloadMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ResumeDownloadMaxAggregateInputType
}

export type GetResumeDownloadAggregateType<T extends ResumeDownloadAggregateArgs> = {
      [P in keyof T & keyof AggregateResumeDownload]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateResumeDownload[P]>
    : Prisma.GetScalarType<T[P], AggregateResumeDownload[P]>
}




export type ResumeDownloadGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ResumeDownloadWhereInput
  orderBy?: Prisma.ResumeDownloadOrderByWithAggregationInput | Prisma.ResumeDownloadOrderByWithAggregationInput[]
  by: Prisma.ResumeDownloadScalarFieldEnum[] | Prisma.ResumeDownloadScalarFieldEnum
  having?: Prisma.ResumeDownloadScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ResumeDownloadCountAggregateInputType | true
  _avg?: ResumeDownloadAvgAggregateInputType
  _sum?: ResumeDownloadSumAggregateInputType
  _min?: ResumeDownloadMinAggregateInputType
  _max?: ResumeDownloadMaxAggregateInputType
}

export type ResumeDownloadGroupByOutputType = {
  id: number
  count: number
  createdAt: Date
  _count: ResumeDownloadCountAggregateOutputType | null
  _avg: ResumeDownloadAvgAggregateOutputType | null
  _sum: ResumeDownloadSumAggregateOutputType | null
  _min: ResumeDownloadMinAggregateOutputType | null
  _max: ResumeDownloadMaxAggregateOutputType | null
}

type GetResumeDownloadGroupByPayload<T extends ResumeDownloadGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ResumeDownloadGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ResumeDownloadGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ResumeDownloadGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ResumeDownloadGroupByOutputType[P]>
      }
    >
  >



export type ResumeDownloadWhereInput = {
  AND?: Prisma.ResumeDownloadWhereInput | Prisma.ResumeDownloadWhereInput[]
  OR?: Prisma.ResumeDownloadWhereInput[]
  NOT?: Prisma.ResumeDownloadWhereInput | Prisma.ResumeDownloadWhereInput[]
  id?: Prisma.IntFilter<"ResumeDownload"> | number
  count?: Prisma.IntFilter<"ResumeDownload"> | number
  createdAt?: Prisma.DateTimeFilter<"ResumeDownload"> | Date | string
}

export type ResumeDownloadOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  count?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ResumeDownloadWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ResumeDownloadWhereInput | Prisma.ResumeDownloadWhereInput[]
  OR?: Prisma.ResumeDownloadWhereInput[]
  NOT?: Prisma.ResumeDownloadWhereInput | Prisma.ResumeDownloadWhereInput[]
  count?: Prisma.IntFilter<"ResumeDownload"> | number
  createdAt?: Prisma.DateTimeFilter<"ResumeDownload"> | Date | string
}, "id">

export type ResumeDownloadOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  count?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.ResumeDownloadCountOrderByAggregateInput
  _avg?: Prisma.ResumeDownloadAvgOrderByAggregateInput
  _max?: Prisma.ResumeDownloadMaxOrderByAggregateInput
  _min?: Prisma.ResumeDownloadMinOrderByAggregateInput
  _sum?: Prisma.ResumeDownloadSumOrderByAggregateInput
}

export type ResumeDownloadScalarWhereWithAggregatesInput = {
  AND?: Prisma.ResumeDownloadScalarWhereWithAggregatesInput | Prisma.ResumeDownloadScalarWhereWithAggregatesInput[]
  OR?: Prisma.ResumeDownloadScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ResumeDownloadScalarWhereWithAggregatesInput | Prisma.ResumeDownloadScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ResumeDownload"> | number
  count?: Prisma.IntWithAggregatesFilter<"ResumeDownload"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ResumeDownload"> | Date | string
}

export type ResumeDownloadCreateInput = {
  count?: number
  createdAt?: Date | string
}

export type ResumeDownloadUncheckedCreateInput = {
  id?: number
  count?: number
  createdAt?: Date | string
}

export type ResumeDownloadUpdateInput = {
  count?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResumeDownloadUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  count?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResumeDownloadCreateManyInput = {
  id?: number
  count?: number
  createdAt?: Date | string
}

export type ResumeDownloadUpdateManyMutationInput = {
  count?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResumeDownloadUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  count?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResumeDownloadCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  count?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ResumeDownloadAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  count?: Prisma.SortOrder
}

export type ResumeDownloadMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  count?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ResumeDownloadMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  count?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ResumeDownloadSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  count?: Prisma.SortOrder
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}



export type ResumeDownloadSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  count?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["resumeDownload"]>

export type ResumeDownloadSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  count?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["resumeDownload"]>

export type ResumeDownloadSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  count?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["resumeDownload"]>

export type ResumeDownloadSelectScalar = {
  id?: boolean
  count?: boolean
  createdAt?: boolean
}

export type ResumeDownloadOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "count" | "createdAt", ExtArgs["result"]["resumeDownload"]>

export type $ResumeDownloadPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ResumeDownload"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    count: number
    createdAt: Date
  }, ExtArgs["result"]["resumeDownload"]>
  composites: {}
}

export type ResumeDownloadGetPayload<S extends boolean | null | undefined | ResumeDownloadDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ResumeDownloadPayload, S>

export type ResumeDownloadCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ResumeDownloadFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ResumeDownloadCountAggregateInputType | true
  }

export interface ResumeDownloadDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResumeDownload'], meta: { name: 'ResumeDownload' } }
  /**
   * Find zero or one ResumeDownload that matches the filter.
   * @param {ResumeDownloadFindUniqueArgs} args - Arguments to find a ResumeDownload
   * @example
   * // Get one ResumeDownload
   * const resumeDownload = await prisma.resumeDownload.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ResumeDownloadFindUniqueArgs>(args: Prisma.SelectSubset<T, ResumeDownloadFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ResumeDownloadClient<runtime.Types.Result.GetResult<Prisma.$ResumeDownloadPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ResumeDownload that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ResumeDownloadFindUniqueOrThrowArgs} args - Arguments to find a ResumeDownload
   * @example
   * // Get one ResumeDownload
   * const resumeDownload = await prisma.resumeDownload.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ResumeDownloadFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ResumeDownloadFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ResumeDownloadClient<runtime.Types.Result.GetResult<Prisma.$ResumeDownloadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ResumeDownload that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResumeDownloadFindFirstArgs} args - Arguments to find a ResumeDownload
   * @example
   * // Get one ResumeDownload
   * const resumeDownload = await prisma.resumeDownload.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ResumeDownloadFindFirstArgs>(args?: Prisma.SelectSubset<T, ResumeDownloadFindFirstArgs<ExtArgs>>): Prisma.Prisma__ResumeDownloadClient<runtime.Types.Result.GetResult<Prisma.$ResumeDownloadPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ResumeDownload that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResumeDownloadFindFirstOrThrowArgs} args - Arguments to find a ResumeDownload
   * @example
   * // Get one ResumeDownload
   * const resumeDownload = await prisma.resumeDownload.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ResumeDownloadFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ResumeDownloadFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ResumeDownloadClient<runtime.Types.Result.GetResult<Prisma.$ResumeDownloadPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ResumeDownloads that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResumeDownloadFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ResumeDownloads
   * const resumeDownloads = await prisma.resumeDownload.findMany()
   * 
   * // Get first 10 ResumeDownloads
   * const resumeDownloads = await prisma.resumeDownload.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const resumeDownloadWithIdOnly = await prisma.resumeDownload.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ResumeDownloadFindManyArgs>(args?: Prisma.SelectSubset<T, ResumeDownloadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ResumeDownloadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ResumeDownload.
   * @param {ResumeDownloadCreateArgs} args - Arguments to create a ResumeDownload.
   * @example
   * // Create one ResumeDownload
   * const ResumeDownload = await prisma.resumeDownload.create({
   *   data: {
   *     // ... data to create a ResumeDownload
   *   }
   * })
   * 
   */
  create<T extends ResumeDownloadCreateArgs>(args: Prisma.SelectSubset<T, ResumeDownloadCreateArgs<ExtArgs>>): Prisma.Prisma__ResumeDownloadClient<runtime.Types.Result.GetResult<Prisma.$ResumeDownloadPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ResumeDownloads.
   * @param {ResumeDownloadCreateManyArgs} args - Arguments to create many ResumeDownloads.
   * @example
   * // Create many ResumeDownloads
   * const resumeDownload = await prisma.resumeDownload.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ResumeDownloadCreateManyArgs>(args?: Prisma.SelectSubset<T, ResumeDownloadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ResumeDownloads and returns the data saved in the database.
   * @param {ResumeDownloadCreateManyAndReturnArgs} args - Arguments to create many ResumeDownloads.
   * @example
   * // Create many ResumeDownloads
   * const resumeDownload = await prisma.resumeDownload.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ResumeDownloads and only return the `id`
   * const resumeDownloadWithIdOnly = await prisma.resumeDownload.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ResumeDownloadCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ResumeDownloadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ResumeDownloadPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ResumeDownload.
   * @param {ResumeDownloadDeleteArgs} args - Arguments to delete one ResumeDownload.
   * @example
   * // Delete one ResumeDownload
   * const ResumeDownload = await prisma.resumeDownload.delete({
   *   where: {
   *     // ... filter to delete one ResumeDownload
   *   }
   * })
   * 
   */
  delete<T extends ResumeDownloadDeleteArgs>(args: Prisma.SelectSubset<T, ResumeDownloadDeleteArgs<ExtArgs>>): Prisma.Prisma__ResumeDownloadClient<runtime.Types.Result.GetResult<Prisma.$ResumeDownloadPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ResumeDownload.
   * @param {ResumeDownloadUpdateArgs} args - Arguments to update one ResumeDownload.
   * @example
   * // Update one ResumeDownload
   * const resumeDownload = await prisma.resumeDownload.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ResumeDownloadUpdateArgs>(args: Prisma.SelectSubset<T, ResumeDownloadUpdateArgs<ExtArgs>>): Prisma.Prisma__ResumeDownloadClient<runtime.Types.Result.GetResult<Prisma.$ResumeDownloadPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ResumeDownloads.
   * @param {ResumeDownloadDeleteManyArgs} args - Arguments to filter ResumeDownloads to delete.
   * @example
   * // Delete a few ResumeDownloads
   * const { count } = await prisma.resumeDownload.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ResumeDownloadDeleteManyArgs>(args?: Prisma.SelectSubset<T, ResumeDownloadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ResumeDownloads.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResumeDownloadUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ResumeDownloads
   * const resumeDownload = await prisma.resumeDownload.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ResumeDownloadUpdateManyArgs>(args: Prisma.SelectSubset<T, ResumeDownloadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ResumeDownloads and returns the data updated in the database.
   * @param {ResumeDownloadUpdateManyAndReturnArgs} args - Arguments to update many ResumeDownloads.
   * @example
   * // Update many ResumeDownloads
   * const resumeDownload = await prisma.resumeDownload.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ResumeDownloads and only return the `id`
   * const resumeDownloadWithIdOnly = await prisma.resumeDownload.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ResumeDownloadUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ResumeDownloadUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ResumeDownloadPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ResumeDownload.
   * @param {ResumeDownloadUpsertArgs} args - Arguments to update or create a ResumeDownload.
   * @example
   * // Update or create a ResumeDownload
   * const resumeDownload = await prisma.resumeDownload.upsert({
   *   create: {
   *     // ... data to create a ResumeDownload
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ResumeDownload we want to update
   *   }
   * })
   */
  upsert<T extends ResumeDownloadUpsertArgs>(args: Prisma.SelectSubset<T, ResumeDownloadUpsertArgs<ExtArgs>>): Prisma.Prisma__ResumeDownloadClient<runtime.Types.Result.GetResult<Prisma.$ResumeDownloadPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ResumeDownloads.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResumeDownloadCountArgs} args - Arguments to filter ResumeDownloads to count.
   * @example
   * // Count the number of ResumeDownloads
   * const count = await prisma.resumeDownload.count({
   *   where: {
   *     // ... the filter for the ResumeDownloads we want to count
   *   }
   * })
  **/
  count<T extends ResumeDownloadCountArgs>(
    args?: Prisma.Subset<T, ResumeDownloadCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ResumeDownloadCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ResumeDownload.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResumeDownloadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ResumeDownloadAggregateArgs>(args: Prisma.Subset<T, ResumeDownloadAggregateArgs>): Prisma.PrismaPromise<GetResumeDownloadAggregateType<T>>

  /**
   * Group by ResumeDownload.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResumeDownloadGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ResumeDownloadGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ResumeDownloadGroupByArgs['orderBy'] }
      : { orderBy?: ResumeDownloadGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ResumeDownloadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResumeDownloadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ResumeDownload model
 */
readonly fields: ResumeDownloadFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ResumeDownload.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ResumeDownloadClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ResumeDownload model
 */
export interface ResumeDownloadFieldRefs {
  readonly id: Prisma.FieldRef<"ResumeDownload", 'Int'>
  readonly count: Prisma.FieldRef<"ResumeDownload", 'Int'>
  readonly createdAt: Prisma.FieldRef<"ResumeDownload", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ResumeDownload findUnique
 */
export type ResumeDownloadFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResumeDownload
   */
  select?: Prisma.ResumeDownloadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ResumeDownload
   */
  omit?: Prisma.ResumeDownloadOmit<ExtArgs> | null
  /**
   * Filter, which ResumeDownload to fetch.
   */
  where: Prisma.ResumeDownloadWhereUniqueInput
}

/**
 * ResumeDownload findUniqueOrThrow
 */
export type ResumeDownloadFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResumeDownload
   */
  select?: Prisma.ResumeDownloadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ResumeDownload
   */
  omit?: Prisma.ResumeDownloadOmit<ExtArgs> | null
  /**
   * Filter, which ResumeDownload to fetch.
   */
  where: Prisma.ResumeDownloadWhereUniqueInput
}

/**
 * ResumeDownload findFirst
 */
export type ResumeDownloadFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResumeDownload
   */
  select?: Prisma.ResumeDownloadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ResumeDownload
   */
  omit?: Prisma.ResumeDownloadOmit<ExtArgs> | null
  /**
   * Filter, which ResumeDownload to fetch.
   */
  where?: Prisma.ResumeDownloadWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ResumeDownloads to fetch.
   */
  orderBy?: Prisma.ResumeDownloadOrderByWithRelationInput | Prisma.ResumeDownloadOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ResumeDownloads.
   */
  cursor?: Prisma.ResumeDownloadWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ResumeDownloads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ResumeDownloads.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ResumeDownloads.
   */
  distinct?: Prisma.ResumeDownloadScalarFieldEnum | Prisma.ResumeDownloadScalarFieldEnum[]
}

/**
 * ResumeDownload findFirstOrThrow
 */
export type ResumeDownloadFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResumeDownload
   */
  select?: Prisma.ResumeDownloadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ResumeDownload
   */
  omit?: Prisma.ResumeDownloadOmit<ExtArgs> | null
  /**
   * Filter, which ResumeDownload to fetch.
   */
  where?: Prisma.ResumeDownloadWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ResumeDownloads to fetch.
   */
  orderBy?: Prisma.ResumeDownloadOrderByWithRelationInput | Prisma.ResumeDownloadOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ResumeDownloads.
   */
  cursor?: Prisma.ResumeDownloadWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ResumeDownloads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ResumeDownloads.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ResumeDownloads.
   */
  distinct?: Prisma.ResumeDownloadScalarFieldEnum | Prisma.ResumeDownloadScalarFieldEnum[]
}

/**
 * ResumeDownload findMany
 */
export type ResumeDownloadFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResumeDownload
   */
  select?: Prisma.ResumeDownloadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ResumeDownload
   */
  omit?: Prisma.ResumeDownloadOmit<ExtArgs> | null
  /**
   * Filter, which ResumeDownloads to fetch.
   */
  where?: Prisma.ResumeDownloadWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ResumeDownloads to fetch.
   */
  orderBy?: Prisma.ResumeDownloadOrderByWithRelationInput | Prisma.ResumeDownloadOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ResumeDownloads.
   */
  cursor?: Prisma.ResumeDownloadWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ResumeDownloads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ResumeDownloads.
   */
  skip?: number
  distinct?: Prisma.ResumeDownloadScalarFieldEnum | Prisma.ResumeDownloadScalarFieldEnum[]
}

/**
 * ResumeDownload create
 */
export type ResumeDownloadCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResumeDownload
   */
  select?: Prisma.ResumeDownloadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ResumeDownload
   */
  omit?: Prisma.ResumeDownloadOmit<ExtArgs> | null
  /**
   * The data needed to create a ResumeDownload.
   */
  data?: Prisma.XOR<Prisma.ResumeDownloadCreateInput, Prisma.ResumeDownloadUncheckedCreateInput>
}

/**
 * ResumeDownload createMany
 */
export type ResumeDownloadCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ResumeDownloads.
   */
  data: Prisma.ResumeDownloadCreateManyInput | Prisma.ResumeDownloadCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ResumeDownload createManyAndReturn
 */
export type ResumeDownloadCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResumeDownload
   */
  select?: Prisma.ResumeDownloadSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ResumeDownload
   */
  omit?: Prisma.ResumeDownloadOmit<ExtArgs> | null
  /**
   * The data used to create many ResumeDownloads.
   */
  data: Prisma.ResumeDownloadCreateManyInput | Prisma.ResumeDownloadCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ResumeDownload update
 */
export type ResumeDownloadUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResumeDownload
   */
  select?: Prisma.ResumeDownloadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ResumeDownload
   */
  omit?: Prisma.ResumeDownloadOmit<ExtArgs> | null
  /**
   * The data needed to update a ResumeDownload.
   */
  data: Prisma.XOR<Prisma.ResumeDownloadUpdateInput, Prisma.ResumeDownloadUncheckedUpdateInput>
  /**
   * Choose, which ResumeDownload to update.
   */
  where: Prisma.ResumeDownloadWhereUniqueInput
}

/**
 * ResumeDownload updateMany
 */
export type ResumeDownloadUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ResumeDownloads.
   */
  data: Prisma.XOR<Prisma.ResumeDownloadUpdateManyMutationInput, Prisma.ResumeDownloadUncheckedUpdateManyInput>
  /**
   * Filter which ResumeDownloads to update
   */
  where?: Prisma.ResumeDownloadWhereInput
  /**
   * Limit how many ResumeDownloads to update.
   */
  limit?: number
}

/**
 * ResumeDownload updateManyAndReturn
 */
export type ResumeDownloadUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResumeDownload
   */
  select?: Prisma.ResumeDownloadSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ResumeDownload
   */
  omit?: Prisma.ResumeDownloadOmit<ExtArgs> | null
  /**
   * The data used to update ResumeDownloads.
   */
  data: Prisma.XOR<Prisma.ResumeDownloadUpdateManyMutationInput, Prisma.ResumeDownloadUncheckedUpdateManyInput>
  /**
   * Filter which ResumeDownloads to update
   */
  where?: Prisma.ResumeDownloadWhereInput
  /**
   * Limit how many ResumeDownloads to update.
   */
  limit?: number
}

/**
 * ResumeDownload upsert
 */
export type ResumeDownloadUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResumeDownload
   */
  select?: Prisma.ResumeDownloadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ResumeDownload
   */
  omit?: Prisma.ResumeDownloadOmit<ExtArgs> | null
  /**
   * The filter to search for the ResumeDownload to update in case it exists.
   */
  where: Prisma.ResumeDownloadWhereUniqueInput
  /**
   * In case the ResumeDownload found by the `where` argument doesn't exist, create a new ResumeDownload with this data.
   */
  create: Prisma.XOR<Prisma.ResumeDownloadCreateInput, Prisma.ResumeDownloadUncheckedCreateInput>
  /**
   * In case the ResumeDownload was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ResumeDownloadUpdateInput, Prisma.ResumeDownloadUncheckedUpdateInput>
}

/**
 * ResumeDownload delete
 */
export type ResumeDownloadDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResumeDownload
   */
  select?: Prisma.ResumeDownloadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ResumeDownload
   */
  omit?: Prisma.ResumeDownloadOmit<ExtArgs> | null
  /**
   * Filter which ResumeDownload to delete.
   */
  where: Prisma.ResumeDownloadWhereUniqueInput
}

/**
 * ResumeDownload deleteMany
 */
export type ResumeDownloadDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ResumeDownloads to delete
   */
  where?: Prisma.ResumeDownloadWhereInput
  /**
   * Limit how many ResumeDownloads to delete.
   */
  limit?: number
}

/**
 * ResumeDownload without action
 */
export type ResumeDownloadDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResumeDownload
   */
  select?: Prisma.ResumeDownloadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ResumeDownload
   */
  omit?: Prisma.ResumeDownloadOmit<ExtArgs> | null
}
